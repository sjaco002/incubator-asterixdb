/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

 //This test ensure that not(is-missing(CONST)) is handled properly

drop dataverse channels if exists;
create dataverse channels;
use channels;

create type userLocation as {
  userId: int,
  roomNumber: int
};

create type result as {
  id:uuid
};

create type subscriptionType as {
  subscriptionId:uuid,
  param0:int
};

create dataset roomRecordsResults(result)
primary key id autogenerated;

create dataset roomRecordsSubscriptions(subscriptionType)
primary key subscriptionId autogenerated;

create dataset UserLocations(userLocation)
primary key userId;

create function RoomOccupants(room) {
  (select location.userId
  from UserLocations location
  where location.roomNumber = room)
};

use channels;
SET inline_with "false";
insert into channels.roomRecordsResults as a (
  with channelExecutionTime as current_datetime()
  select result, channelExecutionTime, sub.subscriptionId as subscriptionId,current_datetime() as deliveryTime
  from channels.roomRecordsSubscriptions sub,
  channels.RoomOccupants(sub.param0) result
) returning a;