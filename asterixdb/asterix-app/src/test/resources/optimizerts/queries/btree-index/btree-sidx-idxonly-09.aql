/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 *  Description     : Secondary BTree Index index-only selection plan verification test
 *                  : The test is intended to verify that the secondary BTree index is used in the optimized query plan.
 *                  : In this plan, we fetch PK and SK based on a select condition that utilizes a secondary index.
 *                  : The plan should have two paths after the secondary index-lookup.
 *                  : The left path:
 *                      ... -> unnest-map (sidx) -> split -> unnest-map (pidx) -> select -> union -> ...
 *                  : The right path:
 *                      ... -> unnest-map (sidx) -> split ->                             -> union -> ...
 *  Expected Result : Success
 *
*/

drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type testType as {
   id: uuid,
   sid: int32
}

create dataset testDataset(testType) primary key id autogenerated
create index testIdx on testDataset(sid)

for $y in [0,2,4,6,8]
return { "quantile":$y,
         "count": count(for $x in dataset testDataset
                        where $x.sid /* +indexnl */ <= $y
                        return $x.sid)
};
